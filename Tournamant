import java.util.*;

public class SwissSystemTournament {

    private static Map<String, Integer> initializeTournament(String[] playerNames) {
        Map<String, Integer> tournament = new HashMap<>();
        for (String player : playerNames) {
            tournament.put(player, 0);
        }
        return tournament;
    }

    private static void printRoundInfo(int roundNum, Map<String, Integer> tournament, String watchingPlayer) {
        System.out.println("\nRound " + roundNum + " - Current Points:");
        for (Map.Entry<String, Integer> entry : tournament.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue() + " points");
        }
        System.out.println("\nWatching:");
        System.out.println(watchingPlayer != null ? watchingPlayer : "None");
    }

    private static void printMatchups(List<String[]> matchups) {
        System.out.println("\nMatchups:");
        for (String[] match : matchups) {
            System.out.println(match[0] + " vs " + match[1]);
        }
    }

    // ... (rest of the methods - generateMatchups, conductRound, filterPlayersByPoints, generateNextRoundMatchups remain largely the same, with minor adjustments to syntax and data structures)

    public static void main(String[] args) {
        // ... (Introduction and banner as before)

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter player names separated by commas: ");
        String[] playerNames = scanner.nextLine().split(",");

        Map<String, Integer> tournament = initializeTournament(playerNames);
        Set<String> watchingPlayers = new HashSet<>();
        int roundNum = 1;

        while (true) {
            List<String[]> matchups = generateNextRoundMatchups(tournament, watchingPlayers);
            if (matchups.isEmpty()) {
                break;
            }
            String watchingPlayer = matchups.get(matchups.size() - 1)[0]; 
            matchups.remove(matchups.size() - 1); // Remove the watching player's match
            
            tournament = conductRound(roundNum, tournament, matchups, watchingPlayer);
            roundNum++;
            watchingPlayers.add(watchingPlayer);
        }

        // ... (Tournament Complete and final info as before)

        scanner.close(); // Close the Scanner to prevent resource leaks
    }
}
